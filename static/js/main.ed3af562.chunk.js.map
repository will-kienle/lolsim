{"version":3,"sources":["store/SimulationSlice.js","store/BuildSetupSlice.js","Landing/Title.js","shared/ClickableImg.js","Landing/ChampSelect.js","shared/TotalLevel.js","BuildSetup/BuildStats.js","BuildSetup/SkillsSetup.js","BuildSetup/ItemsSetup.js","shared/Constants.js","BuildSetup/RunesSetup.js","ExecuteSim/ExecuteButton.js","ExecuteSim/Results.js","BuildSetup/BuildSetup.js","ScenarioSetup/ComboSelection.js","ScenarioSetup/HelpText.js","ScenarioSetup/TargetSetup.js","App.js","reportWebVitals.js","store/store.js","index.js","question-circle.svg"],"names":["initialState","champ","undefined","editingBuilds","combo","simType","simTime","critHandling","pcentCurrentHealth","target","health","ar","mr","simulationSlice","createSlice","name","reducers","resetSim","setChamp","state","action","payload","setEditingBuilds","addSpell","concat","removeSpell","splice","clearCombo","setSimType","setSimTime","setCritHandling","setPcentHealth","setTargetHealth","setTargetAr","setTargetMr","actions","resetToChampSelect","clearChamp","editingIndex","builds","champData","rankQ","rankW","rankE","rankR","items","runes","lastTwoSecondaryRows","resultDamage","resultTime","instances","buildSetupSlice","resetBuildSetup","setEditingIndex","addBuild","newBuild","length","removeBuild","slice","setBuilds","setChampData","validateChampData","maxRanks","clearRanks","addItem","newItem","data","dataDefaultValue","removeItem","updateItemData","find","x","item","validateItemData","dataMinValue","dataMaxValue","addRune","newRune","removeRune","filter","el","clearRunes","updateRuneData","rune","validateRuneData","setLastTwoSecondaryRows","setStats","stats","Title","style","textAlign","ClickableImg","props","useState","hovered","setHovered","id","src","onClick","onMouseEnter","onMouseLeave","cursor","ChampSelect","dispatch","useDispatch","availableChamps","setAvailableChamps","searchText","setSearchText","useEffect","a","fetch","process","response","json","onLoad","Form","Control","width","margin","marginBottom","type","placeholder","value","onChange","e","map","champName","displayName","toLowerCase","replace","checkText","includes","filterChamp","imgPath","totalLevel","build","considerRoa","lvl","Math","max","BuildStats","selectedChamp","useSelector","simulation","buildSetup","method","headers","body","JSON","stringify","champion","time","level","itemData","runeData","armor","resist","onBuildChange","tableLayout","totalAd","bonusAd","ap","atkSpd","toFixed","critChance","cdr","flatAPen","pcentAPen","flatMPen","pcentMPen","mana","buildCost","SkillsSetup","hasData","paddingTop","className","pImgPath","Label","dataPlaceholder","onBlur","display","verticalAlign","marginTop","Button","marginLeft","variant","skill","path","qImgPath","rank","increment","wImgPath","eImgPath","rImgPath","obj","i","ItemsSetup","itemTypes","itemRoles","availableItems","setAvailable","selectedItemRole","setSelectedItemRole","selectedItemFilters","setSelectedItemFilters","sort","y","cost","filterItem","checked","itemImgElement","height","OverlayTrigger","overlay","Tooltip","placement","direction","CloseButton","Array","itemRole","role","itemFilter","Check","inline","label","marginRight","overflowY","Accordion","alwaysOpen","defaultActiveKey","itemType","Item","eventKey","border","Header","Body","backgroundColor","ad","crit","lethality","checkItemFilters","itemName","matchItemName","RuneMap","Precision","Domination","Sorcery","Resolve","Inspiration","RunesSetup","runeTrees","availableRunes","primaryTree","setPrimaryTree","secondaryTree","setSecondaryTree","getRune","runeName","getRuneImg","clearRunesFromTree","tree","row","f","runeIsSelected","position","selection","set","selectRuneTree","j","supported","getRuneSupported","findIndex","selectRune","float","ExecuteButton","resultsDirty","setResultsDirty","simSettings","execute","resultingBuilds","join","resultingBuild","trunc","damage","console","log","push","disabled","Results","detailed","editingBuildIndex","breakdown","setBreakdown","hoveredBuildIndex","setHoveredBuildIndex","findKeystone","findSecondaryTree","keystone","runeDivProps","getPcentDamageByTypeText","physical","magic","tru","total","instance","arr","b","damageText","round","allBuildsHaveDamage","getDamageTotalsBySource","totalDamage","source","occurrances","img","key","pcent","text","color","defaultChecked","buildIndex","borderStyle","borderWidth","borderColor","visibility","stopPropagation","bottom","right","background","lineHeight","paddingBottom","BuildSetup","minWidth","Tabs","Tab","title","maxHeight","ComboSelection","availableSpells","setAvailableSpells","spellsArray","loadSpells","filteredSpells","spell","load","request","scenarioBody","critBody","healthBody","getHeaderText","modal","getBodyText","TargetSetup","currentModal","setCurrentModal","as","require","default","Modal","dialogClassName","show","onHide","closeButton","App","maxWidth","scrollbarGutter","paddingLeft","paddingRight","onSubmit","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","buildSetupReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed3af562.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  champ: undefined,\r\n  editingBuilds: false,\r\n  combo: [],\r\n  simType: \"combo\",\r\n  simTime: 10,\r\n  critHandling: \"average\",\r\n  pcentCurrentHealth: 100,\r\n  target: {\r\n    health: 0,\r\n    ar: 0,\r\n    mr: 0\r\n  }\r\n};\r\n\r\nexport const simulationSlice = createSlice({\r\n  name: 'builds',\r\n  initialState,\r\n  reducers: {\r\n    resetSim: () => {\r\n      return initialState;\r\n    },\r\n    setChamp: (state, action) => {\r\n      state.champ = action.payload;\r\n      state.editingBuilds = true;\r\n    },\r\n    setEditingBuilds: (state, action) => {\r\n      state.editingBuilds = action.payload;\r\n    },\r\n    addSpell: (state, action) => {\r\n      state.combo = state.combo.concat(action.payload);\r\n    },\r\n    removeSpell: (state, action) => {\r\n      state.combo.splice(action.payload, 1);\r\n    },\r\n    clearCombo: (state) => {\r\n      state.combo = [];\r\n    },\r\n    setSimType: (state, action) => {\r\n      state.simType = action.payload;\r\n    },\r\n    setSimTime: (state, action) => {\r\n      state.simTime = action.payload;\r\n    },\r\n    setCritHandling: (state, action) => {\r\n      state.critHandling = action.payload;\r\n    },\r\n    setPcentHealth: (state, action) => {\r\n      state.pcentCurrentHealth = action.payload;\r\n    },\r\n    setTargetHealth: (state, action) => {\r\n      state.target.health = action.payload;\r\n    },\r\n    setTargetAr: (state, action) => {\r\n      state.target.ar = action.payload;\r\n    },\r\n    setTargetMr: (state, action) => {\r\n      state.target.mr = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { setChamp, setEditingBuilds, resetSim, resetToChampSelect, clearChamp, addSpell, removeSpell, clearCombo, setSimType, setSimTime, setCritHandling, setPcentHealth, setTargetHealth, setTargetAr, setTargetMr } = simulationSlice.actions;\r\n\r\nexport default simulationSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  editingIndex: 0,\r\n  builds: [{\r\n    champData: undefined,\r\n    rankQ: 0,\r\n    rankW: 0,\r\n    rankE: 0,\r\n    rankR: 0,\r\n    items: [],\r\n    runes: [],\r\n    lastTwoSecondaryRows: [0, 0],\r\n    resultDamage: 0,\r\n    resultTime: 0,\r\n    instances: []\r\n  }]\r\n};\r\n\r\nexport const buildSetupSlice = createSlice({\r\n  name: 'buildSetup',\r\n  initialState,\r\n  reducers: {\r\n    resetBuildSetup: () => {\r\n      return initialState;\r\n    },\r\n    setEditingIndex: (state, action) => {\r\n      state.editingIndex = action.payload;\r\n    },\r\n    addBuild: (state) => {\r\n      const newBuild = {\r\n        ...state.builds[state.editingIndex],\r\n        resultDamage: 0,\r\n        resultTime: 0,\r\n        instances: []\r\n      };\r\n      state.builds = state.builds.concat(newBuild);\r\n      state.editingIndex = state.builds.length-1;\r\n    },\r\n    removeBuild: (state, action) => {\r\n      state.builds = state.builds.slice(0, action.payload).concat(state.builds.slice(action.payload+1));\r\n      if (state.editingIndex === action.payload || state.editingIndex >= state.builds.length-1)\r\n        state.editingIndex = 0;\r\n    },\r\n    setBuilds: (state, action) => {\r\n      state.builds = action.payload;\r\n    },\r\n    setChampData: (state, action) => {\r\n      state.builds[state.editingIndex].champData = action.payload;\r\n    },\r\n    validateChampData: (state, action) => {\r\n      if (state.builds[state.editingIndex].champData === \"\" || state.builds[state.editingIndex].champData < 0)\r\n        state.builds[state.editingIndex].champData = 0;\r\n      else if (state.builds[state.editingIndex].champData > action.payload)\r\n      state.builds[state.editingIndex].champData = action.payload;\r\n    },\r\n    rankQ: (state) => {\r\n      state.builds[state.editingIndex].rankQ += 1;\r\n    },\r\n    rankW: (state) => {\r\n      state.builds[state.editingIndex].rankW += 1;\r\n    },\r\n    rankE: (state) => {\r\n      state.builds[state.editingIndex].rankE += 1;\r\n    },\r\n    rankR: (state) => {\r\n      state.builds[state.editingIndex].rankR += 1;\r\n    },\r\n    maxRanks: (state) => {\r\n      state.builds[state.editingIndex].rankQ = 5;\r\n      state.builds[state.editingIndex].rankW = 5;\r\n      state.builds[state.editingIndex].rankE = 5;\r\n      state.builds[state.editingIndex].rankR = 3;\r\n    },\r\n    clearRanks: (state) => {\r\n      state.builds[state.editingIndex].rankQ = 0;\r\n      state.builds[state.editingIndex].rankW = 0;\r\n      state.builds[state.editingIndex].rankE = 0;\r\n      state.builds[state.editingIndex].rankR = 0;\r\n    },\r\n    addItem: (state, action) => {\r\n      if (state.builds[state.editingIndex].items.length < 6) {\r\n        const newItem = {\r\n          ...action.payload,\r\n          data: action.payload.dataDefaultValue\r\n        };\r\n        state.builds[state.editingIndex].items = state.builds[state.editingIndex].items.concat(newItem);\r\n    }\r\n    },\r\n    removeItem: (state, action) => {\r\n      state.builds[state.editingIndex].items = state.builds[state.editingIndex].items.slice(0, action.payload).concat(state.builds[state.editingIndex].items.slice(action.payload+1));\r\n    },\r\n    updateItemData: (state, action) => {\r\n      state.builds[state.editingIndex].items.find(x => x.name === action.payload.item.name).data = action.payload.data;\r\n    },\r\n    validateItemData: (state, action) => {\r\n      const item = state.builds[state.editingIndex].items.find(x => x.name === action.payload.name);\r\n      if (item.data === \"\")\r\n        item.data = 0;\r\n      if (item.data < item.dataMinValue)\r\n        item.data = item.dataMinValue;\r\n      if (item.data > item.dataMaxValue)\r\n        item.data = item.dataMaxValue;\r\n    },\r\n    addRune: (state, action) => {\r\n      const newRune = {\r\n        ...action.payload,\r\n        data: action.payload.dataDefaultValue\r\n      };\r\n      state.builds[state.editingIndex].runes = state.builds[state.editingIndex].runes.concat(newRune);\r\n    },\r\n    removeRune: (state, action) => {\r\n      state.builds[state.editingIndex].runes = [...state.builds[state.editingIndex].runes].filter(el => el.name !== action.payload.name);\r\n    },\r\n    clearRunes: (state) => {\r\n      state.builds[state.editingIndex].runes = [];\r\n    },\r\n    updateRuneData: (state, action) => {\r\n      state.builds[state.editingIndex].runes.find(x => x.name === action.payload.rune.name).data = action.payload.data;\r\n    },\r\n    validateRuneData: (state, action) => {\r\n      const rune = state.builds[state.editingIndex].runes.find(x => x.name === action.payload.name);\r\n      if (rune.data === \"\" || rune.data < 0)\r\n        rune.data = 0;\r\n      if (rune.data > rune.dataMaxValue)\r\n        rune.data = rune.dataMaxValue;\r\n    },\r\n    setLastTwoSecondaryRows: (state, action) => {\r\n      state.builds[state.editingIndex].lastTwoSecondaryRows = action.payload;\r\n    },\r\n    setStats: (state, action) => {\r\n      state.builds[state.editingIndex].stats = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { resetBuildSetup, setEditingIndex, setBuilds, addBuild, removeBuild, resetToChampSelect, setChampData, validateChampData, rankQ, rankW, rankE, rankR, maxRanks, clearRanks, addItem, removeItem, updateItemData, validateItemData, addRune, removeRune, clearRunes, updateRuneData, validateRuneData, setLastTwoSecondaryRows } = buildSetupSlice.actions;\r\n\r\nexport default buildSetupSlice.reducer;","\r\nconst Title = () => {\r\n    return (\r\n        <h1 style={{textAlign: \"center\"}}>LoLSim</h1>\r\n    );\r\n}\r\n\r\nexport default Title;","import { useState } from 'react';\r\n\r\nconst ClickableImg = (props) => {\r\n\r\n    const [hovered, setHovered] = useState(false);\r\n\r\n    return (\r\n    <img\r\n        id={props.id}\r\n        src={props.src}\r\n        onClick={props.onClick}\r\n        onMouseEnter={() => setHovered(true)}\r\n        onMouseLeave={() => setHovered(false)}\r\n        style={hovered ? {...props.style, filter: \"brightness(150%)\", cursor: \"pointer\"} : props.style}/>\r\n      );\r\n}\r\n\r\nexport default ClickableImg;","import { useState, useEffect } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { setChamp } from '../store/SimulationSlice';\n\nimport Form from 'react-bootstrap/Form';\nimport ClickableImg from '../shared/ClickableImg';\n\nconst ChampSelect = () => {\n\n  const dispatch = useDispatch();\n\n  const [availableChamps, setAvailableChamps] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n\n  useEffect(() => {\n    async function onLoad() {\n      var response = await fetch(`${process.env.REACT_APP_API_PATH}getChamps`);\n      var data = await response.json();\n      setAvailableChamps(data);\n    }\n    onLoad();\n  }, []);\n\n  const filterChamp = (champ) => {\n    const champName = champ.displayName.toLowerCase().replace('\\'', '').replace(' ', '');\n    const checkText = searchText.toLowerCase().replace('\\'', '').replace(' ', '');\n    return champName.includes(checkText);\n  }\n  \n  return (\n    <div>\n      <Form.Control\n        style={{width: \"400px\", margin: \"auto\", marginBottom: \"12px\"}}\n        type=\"search\"\n        placeholder=\"Search...\"\n        value={searchText}\n        onChange={(e) => setSearchText(e.target.value)}\n      />\n      <div style={{width: `${(120+8)*4}px`, margin: \"auto\"}}>\n        {availableChamps.map((champ) => \n          filterChamp(champ) &&\n            <ClickableImg\n              style={{margin: \"4px\"}}\n              src={`${process.env.PUBLIC_URL}/assets/img/${champ.imgPath}`}\n              onClick={() => dispatch(setChamp(champ))}/>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ChampSelect;\n","export const totalLevel = (build, considerRoa=true) => {\r\n    if (build) {\r\n        let lvl = build.rankQ+build.rankW+build.rankE+build.rankR;\r\n        if (considerRoa && (build.items.find(e => e.name === \"RodOfAges\")?.data === \"10\" || build.items.find(e => e.name === \"RodOfAges\")?.data === 10) && lvl < 18)\r\n            lvl -= 1;\r\n        return Math.max(1, lvl);\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n}","import { useState, useEffect } from 'react';\n\nimport { useSelector } from 'react-redux';\n\nimport { totalLevel } from '../shared/TotalLevel';\n\nconst BuildStats = () => {\n\n  const selectedChamp = useSelector((state) => state.simulation.champ);\n  const buildSetup = useSelector((state) => state.buildSetup.builds[state.buildSetup.editingIndex]);\n  const [stats, setStats] = useState({});\n\n  useEffect(() => {\n    onBuildChange();\n  }, [buildSetup]);\n\n  async function onBuildChange() {\n    var response = await fetch(`${process.env.REACT_APP_API_PATH}getStats`, \n      {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(\n          {\n            champion : selectedChamp.name,\n            champData : buildSetup.champData,\n            combo : \"\",\n            time: 0,\n            level : totalLevel(buildSetup),\n            rankQ : buildSetup.rankQ-1,\n            rankW : buildSetup.rankW-1,\n            rankE : buildSetup.rankE-1,\n            rankR : buildSetup.rankR-1,\n            items: buildSetup.items.map((item) => item.name),\n            itemData: buildSetup.items.map((item) => item.data),\n            runes : [],\n            runeData : [],\n            target : {\n              health : 0,\n              armor : 0,\n              resist : 0\n            },\n            pcentCurrentHealth : 1,\n            critHandling : \"none\"\n          }\n        )\n      });\n      var data = await response.json();\n      setStats(data);\n    }\n\n  const statLines = () => [\n    \n  ]\n\n  return (\n    <div>\n      <div style={{textAlign: \"center\"}}>\n        <h2>Current Build</h2>\n      </div>\n      <table style={{width: \"100%\", tableLayout: \"fixed\"}}>\n        <tbody>\n          <tr>\n            <td style={{textAlign: \"right\"}}><b>Level:</b></td> \n            <td>{totalLevel(buildSetup)}</td></tr>\n          <tr>\n            <td style={{textAlign: \"right\"}}><b>Total AD:</b></td> \n            <td>{stats.totalAd}</td></tr>\n          <tr>\n            <td style={{textAlign: \"right\"}}><b>Bonus AD:</b></td> \n            <td>{stats.bonusAd}</td></tr>\n          <tr>\n            <td style={{textAlign: \"right\"}}><b>AP:</b></td> \n            <td>{stats.ap}</td></tr>\n          <tr>\n            <td style={{textAlign: \"right\"}}><b>Attack Speed:</b></td> \n            <td>{(stats.atkSpd ?? 0).toFixed(3)}</td></tr>\n          <tr>\n            <td style={{textAlign: \"right\"}}><b>Crit Chance:</b></td> \n            <td>{stats.critChance}%</td></tr>\n          <tr>\n            <td style={{textAlign: \"right\"}}><b>Ability Haste:</b></td> \n            <td>{stats.cdr}</td></tr>\n          <tr>\n            <td style={{textAlign: \"right\"}}><b>Armor Penetration:</b></td> \n            <td>{stats.flatAPen}/{stats.pcentAPen}%</td></tr>\n          <tr>\n            <td style={{textAlign: \"right\"}}><b>Magic Penetration:</b></td> \n            <td>{stats.flatMPen}/{stats.pcentMPen}%</td></tr>\n          <tr>\n            <td style={{textAlign: \"right\"}}><b>Health:</b></td> \n            <td>{stats.health}</td></tr>\n          <tr>\n            <td style={{textAlign: \"right\"}}><b>Mana:</b></td> \n            <td>{stats.mana}</td></tr>\n          <tr>\n            <td style={{textAlign: \"right\"}}><b>Item Build Cost:</b></td> \n            <td>{stats.buildCost}</td></tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default BuildStats;\n","import { useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport Form from 'react-bootstrap/Form';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setChampData, validateChampData, rankQ, rankW, rankE, rankR, clearRanks, maxRanks } from '../store/BuildSetupSlice';\n\nimport ClickableImg from '../shared/ClickableImg';\nimport { totalLevel } from '../shared/TotalLevel';\n\nconst SkillsSetup = () => {\n\n  const dispatch = useDispatch();\n\n  const selectedChamp = useSelector((state) => state.simulation.champ);\n  const build = useSelector((state) => state.buildSetup.builds[state.buildSetup.editingIndex]);\n\n  useEffect(() => {\n    if (!build.champData)\n      dispatch(setChampData(0));\n  }, []);\n\n  const skillIsLevelable = (skill, rank) => {\n    if (skill === 'R')\n      return (\n        (totalLevel(build, false) >= 15 && rank <= 2) ||\n        (totalLevel(build, false) >= 10 && rank <= 1) ||\n        (totalLevel(build, false) >= 5 && rank <= 0)) &&\n        rank < 3;\n    else\n        return totalLevel(build, false) / 2 >= rank && rank < 5;\n  }\n\n  return (\n    <div style={{textAlign: \"center\"}}>\n      {selectedChamp.hasData &&\n      <div style={{width: \"298px\", margin: \"auto\", paddingTop: \"20px\"}} className=\"d-flex align-items-end\">\n        <img id=\"img-48\" src={`${process.env.PUBLIC_URL}/assets/img/${selectedChamp.pImgPath}`}/>\n        <Form.Label style={{width: \"150px\"}}>{selectedChamp.dataPlaceholder}:</Form.Label>\n        <Form.Control\n          style={{width: \"100px\"}}\n          type=\"number\"\n          value={build.champData}\n          onChange={(e) => dispatch(setChampData(e.target.value))} \n          onBlur={() => dispatch(validateChampData(selectedChamp.dataMaxValue))} />\n      </div>}\n      <div style={{display: \"inline-block\", width: \"30%\", verticalAlign: \"top\", marginTop: \"70px\"}}>\n        <Form.Label><h2>Level: {totalLevel(build)}</h2></Form.Label>\n        <Button \n          style={{verticalAlign: \"top\", marginLeft: \"12px\"}} \n          onClick={() => dispatch(maxRanks())}>\n          Set to 18\n        </Button>\n        <Button \n          style={{verticalAlign: \"top\", marginLeft: \"12px\"}} \n          variant={\"secondary\"}\n          onClick={() => dispatch(clearRanks())}>\n          Reset\n        </Button>\n      </div>\n      <div style={{display: \"inline-block\", width: \"30%\", marginTop: \"20px\"}}>\n        {[\n          {skill: 'Q', path: selectedChamp.qImgPath, rank: build.rankQ, increment: ()=>dispatch(rankQ())}, \n          {skill: 'W', path: selectedChamp.wImgPath, rank: build.rankW, increment: ()=>dispatch(rankW())},\n          {skill: 'E', path: selectedChamp.eImgPath, rank: build.rankE, increment: ()=>dispatch(rankE())},\n          {skill: 'R', path: selectedChamp.rImgPath, rank: build.rankR, increment: ()=>dispatch(rankR())}].map((obj) => (\n            <div style={{display: \"inline-block\"}}>\n              {skillIsLevelable(obj.skill, obj.rank) \n              ?\n                <ClickableImg \n                  src={`${process.env.PUBLIC_URL}/assets/img/levelupactive.png`} \n                  onClick={obj.increment} \n                  style={{display: \"block\", margin: \"2px\"}}/> \n              :\n                <img \n                  src={`${process.env.PUBLIC_URL}/assets/img/levelupinactive.png`} \n                  style={{display: \"block\", margin: \"2px\"}}/>\n              }\n              <img \n                src={`${process.env.PUBLIC_URL}/assets/img/${obj.path}`} \n                style={{display: \"block\", margin: \"2px\"}}/>\n              <div style={{textAlign: \"center\", margin: \"2px\"}}>\n                {[1,2,3,4,5].map((i) => (\n                  <div style={{display: \"inline-block\"}}>\n                    {obj.skill !== 'R' || i < 4 ? \n                      <div id={`skill-rank-dot-${obj.rank+1 > i ? 'filled' : 'open'}`}></div> : null}\n                  </div>))}\n              </div>\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n}\n\nexport default SkillsSetup;\n","import { useState, useEffect } from 'react';\nimport { OverlayTrigger, Tooltip, CloseButton, Accordion } from 'react-bootstrap';\nimport Form from 'react-bootstrap/Form';\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { addItem, removeItem, updateItemData, validateItemData } from '../store/BuildSetupSlice';\n\nimport ClickableImg from '../shared/ClickableImg';\n\nconst ItemsSetup = () => {\n\n  const dispatch = useDispatch();\n\n  const itemTypes = [\"Mythic\", \"Legendary\", \"Epic\", \"Common\", \"Starter\", \"Boots\"];\n  const itemRoles = [\"Specialist\", \"Marksman\", \"Fighter\", \"Slayer\", \"Mage\", \"Tank\"];\n  const itemFilters = [\"AD\", \"AP\", \"AS\", \"CDR\", \"Crit\", \"A. Pen\", \"M. Pen\", \"HP\", \"Mana\"];\n\n  const buildSetup = useSelector((state) => state.buildSetup.builds[state.buildSetup.editingIndex]);\n  const [availableItems, setAvailable] = useState([]);\n  const [selectedItemRole, setSelectedItemRole] = useState(itemRoles[0]);\n  const [selectedItemFilters, setSelectedItemFilters] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n\n  useEffect(() => {\n    async function onLoad() {\n      var response = await fetch(`${process.env.REACT_APP_API_PATH}getItems`);\n      var data = await response.json();\n      data.sort((x, y) => x.cost < y.cost);\n      setAvailable(data);\n    }\n    onLoad();\n  }, []);\n\n  const selectItemRole = (role) => {\n    if (selectedItemRole === role)\n      setSelectedItemRole(itemRoles[0]);\n    else\n      setSelectedItemRole(role);\n  }\n\n  const filterItem = (e) => {\n    if (e.target.checked)\n      setSelectedItemFilters(selectedItemFilters.concat(e.target.id));\n    else\n      setSelectedItemFilters([...selectedItemFilters].filter(el => el !== e.target.id));\n  }\n\n  const matchItemName = (item) => {\n    const itemName = item.displayName.toLowerCase().replace('\\'', '').replace(' ', '');\n    const checkText = searchText.toLowerCase().replace('\\'', '').replace(' ', '');\n    return itemName.includes(checkText);\n  }\n\n  const checkItemFilters = (item) => {\n    for (const filter of selectedItemFilters) {\n      if (filter === \"AD\" && item.ad === 0)\n        return false;\n      if (filter === \"AP\" && item.ap === 0)\n        return false;\n      if (filter === \"AS\" && item.atkSpd === 0)\n        return false;\n      if (filter === \"CDR\" && item.cdr === 0)\n        return false;\n      if (filter === \"Crit\" && item.crit === 0)\n        return false;\n      if (filter === \"A. Pen\" && item.lethality === 0 && item.pcentAPen === 0)\n        return false;\n      if (filter === \"M. Pen\" && item.flatMPen === 0 && item.pcentMPen === 0)\n        return false;\n      if (filter === \"HP\" && item.health === 0)\n        return false;\n      if (filter === \"Mana\" && item.mana === 0)\n        return false;\n    }\n    return true;\n  }\n\n  const itemImgElement = (item) => {\n    return (\n      <ClickableImg \n        style={{margin: \"2px\"}}\n        src={`${process.env.PUBLIC_URL}/assets/img/${item.imgPath}`}\n        onClick={() => dispatch(addItem(item))} />\n    );\n  }\n\n  return (\n    <div style={{margin: \"20px\"}}>\n      <div style={{display: \"inline-block\", width: \"40%\"}}>\n        <table style={{width: \"100%\"}}>\n          <tbody>\n            {buildSetup.items.map((item, i) => (\n              <tr style={{height: \"70px\"}}>\n                <td><img src={`${process.env.PUBLIC_URL}/assets/img/${item.imgPath}`}/></td>\n                <td style={{width: \"50%\", textAlign: \"left\"}}>{item.displayName}</td>\n                {item.hasData \n                ? \n                  <OverlayTrigger\n                    overlay={<Tooltip id={\"tooltipid\"}>{item.dataPlaceholder}</Tooltip>}\n                    placement=\"top\">\n                    <td id=\"item-data\">\n                      <Form.Control\n                        type=\"number\"\n                        value={item.data}\n                        onChange={(e) => dispatch(updateItemData({item: item, data: e.target.value}))}\n                        onBlur={() => dispatch(validateItemData(item))}/>\n                    </td>\n                  </OverlayTrigger> \n                : \n                  <td id=\"item-data\"></td>}\n                <td style={{direction: \"rtl\"}}>\n                  <CloseButton\n                    variant=\"white\"\n                    onClick={()=>dispatch(removeItem(i))}\n                  />\n                </td>\n              </tr>\n            ))}\n            {[...Array(6-buildSetup.items.length)].map(x => <tr style={{height: \"70px\"}}><div id=\"empty-item-64\"></div></tr>)}\n          </tbody>\n        </table>\n      </div>\n      <div style={{display: \"inline-block\", width: \"60%\", verticalAlign: \"top\"}}>\n        <div style={{width: `${6*48}px`, margin: \"auto\"}}>\n          {itemRoles.map((itemRole) => (\n            <ClickableImg\n              id=\"img-48\"\n              src={`${process.env.PUBLIC_URL}/assets/img/${itemRole}_icon.webp`}\n              style={{filter: itemRole === selectedItemRole ? \"brightness(25%)\" : null}}\n              onClick={() => selectItemRole(itemRole)} />\n          ))}\n        </div>\n        <div style={{textAlign: \"center\"}}>\n          {itemFilters.map((itemFilter) => (\n            <Form.Check\n              inline\n              label={itemFilter}\n              name=\"itemFilters\"\n              type=\"checkbox\"\n              id={itemFilter}\n              onChange={filterItem}\n              style={{marginRight: 10}} />\n          ))}\n        </div>\n        <Form.Control\n          style={{width: \"60%\", margin: \"auto\", marginBottom: \"4px\"}}\n          type=\"search\"\n          placeholder=\"Search by name...\"\n          value={searchText}\n          onChange={(e) => setSearchText(e.target.value)}\n        />\n        <div style={{overflowY: \"scroll\", height: \"400px\"}}>\n          {searchText.length === 0 \n          ?\n            <Accordion alwaysOpen defaultActiveKey={itemTypes}>\n              {itemTypes.map((itemType) => (\n                <Accordion.Item eventKey={itemType} style={{border: \"0\"}}>\n                  <Accordion.Header>{itemType}</Accordion.Header>\n                  <Accordion.Body style={{textAlign: \"center\", backgroundColor: \"#4d4d4d\"}}>\n                    {availableItems.map((item) => (\n                      item.type === itemType &&\n                      checkItemFilters(item) &&\n                      ( selectedItemRole === itemRoles[0] ||\n                        item.type === \"Boots\" ||\n                        item.role.includes(selectedItemRole) ) \n                      ?\n                        itemImgElement(item) \n                      :\n                        null\n                    ))}\n                  </Accordion.Body>\n                </Accordion.Item>\n              ))}\n            </Accordion>\n          :\n            <div style={{textAlign: \"center\"}}>\n              {availableItems.map((item) => (\n                matchItemName(item) \n                ?\n                  itemImgElement(item)  \n                :\n                  null\n              ))}\n            </div>\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ItemsSetup;\n","export const RuneMap = {\r\n  Precision: [\r\n    [\"PressTheAttack\", \"LethalTempo\", \"Fleet\", \"Conqueror\"],\r\n    [\"Overheal\", \"Triumph\", \"Presence\"],\r\n    [\"Alacrity\", \"Tenacity\", \"Bloodline\"],\r\n    [\"Coup\", \"CutDown\", \"LastStand\"]],\r\n  Domination: [\r\n    [\"Electrocute\", \"Predator\", \"DarkHarvest\", \"HailOfBlades\"],\r\n    [\"CheapShot\", \"TasteOfBlood\", \"SuddenImpact\"],\r\n    [\"Tracking1\", \"Tracking2\", \"Tracking3\"],\r\n    [\"RavenousHunter\", \"IngeniousHunter\", \"RelentlessHunter\", \"UltimateHunter\"]],\r\n  Sorcery: [\r\n    [\"Aery\", \"Comet\", \"PhaseRush\"],\r\n    [\"NullifyingOrb\", \"Manaflow\", \"NimbusCloak\"],\r\n    [\"Transcendence\", \"Celerity\", \"AbsoluteFocus\"],\r\n    [\"Scorch\", \"Waterwalking\", \"GatheringStorm\"]],\r\n  Resolve: [\r\n    [\"Grasp\", \"Aftershock\", \"Guardian\"],\r\n    [\"Demolish\", \"FontOfLife\", \"ShieldBash\"],\r\n    [\"Conditioning\", \"SecondWind\", \"BonePlating\"],\r\n    [\"Overgrowth\", \"Revitalize\", \"Unflinching\"]],\r\n  Inspiration: [\r\n    [\"Glacial\", \"Spellbook\", \"FirstStrike\"],\r\n    [\"Hexflash\", \"MagicBoots\", \"Stopwatch\"],\r\n    [\"FuturesMarket\", \"Flashbangs\", \"Biscuits\"],\r\n    [\"CosmicInsight\", \"ApproachVelocity\", \"TimeWarp\"]],\r\n};","import { useState, useEffect } from 'react';\nimport { OverlayTrigger, Tooltip, Button } from 'react-bootstrap';\nimport Form from 'react-bootstrap/Form';\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { addRune,  updateRuneData, validateRuneData, removeRune, setLastTwoSecondaryRows, clearRunes } from '../store/BuildSetupSlice';\nimport { RuneMap } from '../shared/Constants';\n\nimport ClickableImg from '../shared/ClickableImg';\n\nconst RunesSetup = () => {\n\n  const dispatch = useDispatch();\n\n  const runeTrees = [\"Precision\", \"Domination\", \"Sorcery\", \"Resolve\", \"Inspiration\"];\n\n  const buildSetup = useSelector((state) => state.buildSetup.builds[state.buildSetup.editingIndex]);\n  const lastTwoSecondaryRows = useSelector((state) => state.buildSetup.builds[state.buildSetup.editingIndex].lastTwoSecondaryRows);\n  const [availableRunes, setAvailable] = useState([]);\n  const [primaryTree, setPrimaryTree] = useState(runeTrees[0]);\n  const [secondaryTree, setSecondaryTree] = useState(runeTrees[1]);\n\n  useEffect(() => {\n    async function onLoad() {\n      var response = await fetch(`${process.env.REACT_APP_API_PATH}getRunes`);\n      var data = await response.json();\n      setAvailable(data);\n    }\n    onLoad();\n  }, []);\n\n  const getRune = (runeName) => {\n    return availableRunes.find(x => x.name === runeName);\n  }\n\n  const getRuneImg = (runeName) => {\n    var rune = getRune(runeName);\n    return rune ? rune.imgPath : \"\";\n  }\n\n  const getRuneSupported = (runeName) => {\n    var rune = getRune(runeName);\n    return rune ? rune.supported : false;\n  }\n\n  const clearRunesFromTree = (tree) => {\n    if (secondaryTree === tree)\n      dispatch(setLastTwoSecondaryRows([0, 0]));\n    for (var row of RuneMap[tree])\n      for (var rune of row)\n        dispatch(removeRune(getRune(rune)));\n  }\n\n  const selectRuneTree = (position, tree) => {\n    if (position === 1 && primaryTree !== tree) {\n      clearRunesFromTree(primaryTree);\n      setPrimaryTree(tree);\n      if (secondaryTree === tree) {\n        clearRunesFromTree(secondaryTree);\n        setSecondaryTree(tree === runeTrees[0] ? runeTrees[1] : runeTrees[0]);\n      }\n    }\n    else if (position === 2 && secondaryTree !== tree) {\n      clearRunesFromTree(secondaryTree);\n      setSecondaryTree(tree);\n      if (primaryTree === tree) {\n        clearRunesFromTree(primaryTree);\n        setPrimaryTree(tree === runeTrees[0] ? runeTrees[1] : runeTrees[0]);\n      }\n    }\n  }\n\n  const runeIsSelected = (runeName) => {\n    return buildSetup.runes.find(x => x.name === runeName) !== undefined;\n  }\n\n  const selectRune = (runeName, position) => {\n    if (runeIsSelected(runeName))\n      // Deselect rune\n      dispatch(removeRune(getRune(runeName)));\n    else {\n      // Clear other runes in the same row\n      for (var tree in RuneMap) {\n        for (var row of RuneMap[tree]) {\n          if (row.includes(runeName)) {\n            for (var rune of row)\n              dispatch(removeRune(getRune(rune)));\n          }\n        }\n      }\n      // Enforce only two secondary runes selected\n      if (position === 2) {\n        let row = RuneMap[secondaryTree].findIndex(x => x.includes(runeName));\n        if (!lastTwoSecondaryRows.includes(row))\n          for (var rune of RuneMap[secondaryTree][lastTwoSecondaryRows[1]])\n            dispatch(removeRune(getRune(rune)));\n        if (row !== lastTwoSecondaryRows[0])\n          dispatch(setLastTwoSecondaryRows([row, lastTwoSecondaryRows[0]]));\n      }\n      // Add selected rune\n      dispatch(addRune(getRune(runeName)));\n    }\n  }\n\n  return (\n    <div style={{margin: \"20px\", textAlign: \"center\"}}>\n      <div style={{display: \"inline-block\", verticalAlign: \"top\", width: \"260px\", paddingTop: \"60px\"}}>\n        <Button\n          variant={\"secondary\"}\n          onClick={() => dispatch(clearRunes())}>\n          Clear All\n        </Button>\n        <div/>\n        <br/>\n        <div>It is not necessary to select a full set of runes, or any runes at all</div>\n        <br/>\n        <div>Runes that gain stacks up to a cap will give their maximum benefit</div>\n      </div>\n      {[\n        {position: 1, selection: primaryTree, set: setPrimaryTree},\n        {position: 2, selection: secondaryTree, set: setSecondaryTree}\n      ].map((obj) => (\n        <div style={{display: \"inline-block\", verticalAlign: \"top\", textAlign: \"center\", width: `${4*64}px`}}>\n          {runeTrees.map((tree) => (\n            <ClickableImg \n              src={`${process.env.PUBLIC_URL}/assets/img/${tree}_icon.webp`}\n              onClick={() => selectRuneTree(obj.position, tree)}/>\n          ))}\n          <div style={{paddingTop: \"20px\"}}>\n            {([0,1,2,3]).map((i) => (\n              obj.position === 2 && i === 0 \n              ?\n                <div style={{paddingTop: \"64px\"}}/>\n              :\n                <div>\n                  {[0,1,2,3].map((j) => (\n                    (j >= RuneMap[obj.selection][i].length) ? null :\n                      getRuneSupported(RuneMap[obj.selection][i][j]) ?\n                        <ClickableImg \n                          src={`${process.env.PUBLIC_URL}/assets/img/${getRuneImg(RuneMap[obj.selection][i][j])}`}\n                          onClick={() => selectRune(RuneMap[obj.selection][i][j], obj.position)}\n                          style={{filter: runeIsSelected(RuneMap[obj.selection][i][j]) && \"brightness(25%)\"}} /> :\n                        <img\n                          src={`${process.env.PUBLIC_URL}/assets/img/${getRuneImg(RuneMap[obj.selection][i][j])}`}\n                          style={{filter: \"grayscale(1) brightness(50%)\"}} />\n                  ))}\n                </div>\n            ))}\n          </div>\n        </div>\n      ))}\n      <div style={{display: \"inline-block\", verticalAlign: \"top\", width: \"260px\"}}>\n        <table>\n          <tbody>\n            {buildSetup.runes.map((rune) => (\n                rune.hasData &&\n                  <tr>\n                    <td>{rune.displayName}</td>\n                    <td>\n                      <OverlayTrigger\n                        overlay={<Tooltip id={\"tooltipid\"}>{rune.dataPlaceholder}</Tooltip>}\n                        placement=\"top\">\n                        <Form.Control\n                          style={{width: \"120px\", float: \"right\"}}\n                          type=\"number\"\n                          value={rune.data}\n                          onChange={(e) => dispatch(updateRuneData({rune: rune, data: e.target.value}))}\n                          onBlur={() => dispatch(validateRuneData(rune))}/>\n                      </OverlayTrigger>\n                    </td>\n                  </tr>\n          ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default RunesSetup;\n","import { Button } from 'react-bootstrap';\nimport { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setBuilds } from '../store/BuildSetupSlice';\n\nimport { totalLevel } from '../shared/TotalLevel';\n\nconst ExecuteButton = () => {\n\n  const dispatch = useDispatch();\n\n  const [resultsDirty, setResultsDirty] = useState(true);\n  const selectedChamp = useSelector((state) => state.simulation.champ);\n  const builds = useSelector((state) => state.buildSetup.builds);\n  const simSettings = useSelector((state) => state.simulation);\n  const combo = useSelector((state) => state.simulation.combo);\n  const simType = useSelector((state) => state.simulation.simType);\n  const simTime = useSelector((state) => state.simulation.simTime);\n  const crit = useSelector((state) => state.simulation.critHandling);\n  const target = useSelector((state) => state.simulation.target);\n  const pcentCurrentHealth = useSelector((state) => state.simulation.pcentCurrentHealth);\n\n  useEffect(() => {\n    setResultsDirty(true);\n  }, [simSettings]);\n\n  const execute = async () => {\n    setResultsDirty(false);\n    var resultingBuilds = [];\n    for (var build of builds) {\n      var response = await fetch(`${process.env.REACT_APP_API_PATH}${simType}`, \n      {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(\n          {\n            champion : selectedChamp.name,\n            champData : build.champData,\n            combo : combo.map(x => x.name).join(\" \"),\n            time: simTime,\n            level : totalLevel(build),\n            rankQ : build.rankQ-1,\n            rankW : build.rankW-1,\n            rankE : build.rankE-1,\n            rankR : build.rankR-1,\n            items: build.items.map(x => x.name),\n            itemData: build.items.map(x => x.data),\n            runes : build.runes.map(x => x.name),\n            runeData : build.runes.map(x => x.data),\n            target : {\n              health : target.health,\n              armor : target.ar,\n              resist : target.mr\n            },\n            pcentCurrentHealth : pcentCurrentHealth / 100.0,\n            critHandling : crit\n          }\n        )\n      });\n      var data = await response.json();\n      var resultingBuild = {...build};\n      resultingBuild.resultDamage = Math.trunc(data.damage.damage);\n      resultingBuild.resultTime = data.time / 1000.0;\n      resultingBuild.instances = data.damage.instances;\n      console.log(resultingBuild);\n      resultingBuilds.push(resultingBuild);\n    }\n    dispatch(setBuilds(resultingBuilds));\n  }\n\n  return (\n    <Button\n      style={{margin: \"12px\"}}\n      variant=\"primary\"\n      disabled={!resultsDirty}\n      onClick={execute}\n    >\n      <b>Run Simulation</b>\n    </Button>\n  );\n}\n\nexport default ExecuteButton;\n","import { CloseButton } from 'react-bootstrap';\nimport { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { removeBuild, setEditingIndex } from '../store/BuildSetupSlice';\n\nimport { RuneMap } from '../shared/Constants';\nimport ExecuteButton from './ExecuteButton';\n\nconst Results = ({detailed}) => {\n\n  const dispatch = useDispatch();\n\n  const selectedChamp = useSelector((state) => state.simulation.champ);\n  const builds = useSelector((state) => state.buildSetup.builds);\n  const editingBuildIndex = useSelector((state) => state.buildSetup.editingIndex);\n  const [breakdown, setBreakdown] = useState(\"totals\");\n  const [hoveredBuildIndex, setHoveredBuildIndex] = useState(-1);\n\n  const findKeystone = (build) => {\n    for (var rune of build.runes)\n      for (var tree in RuneMap)\n        if (RuneMap[tree][0].includes(rune.name)) \n          return rune;\n  }\n\n  const findSecondaryTree = (build) => {\n    const keystone = findKeystone(build);\n    let primaryTree;\n    if (keystone) {\n      for (var tree in RuneMap)\n        if (RuneMap[tree][0].includes(keystone.name)) \n          primaryTree = tree;\n    }\n    for (var rune of build.runes)\n      for (var tree in RuneMap)\n        for (var row of RuneMap[tree])\n          if (row.includes(rune.name) && (tree !== primaryTree || !primaryTree)) \n            return tree;\n  }\n\n  const buildDivStyle = (i) => {\n    if (detailed) \n      return {display: \"inline-block\", verticalAlign: \"top\", width: \"400px\"};\n    else if (i === editingBuildIndex)\n      return {marginLeft: \"1px\", borderStyle: \"solid\", borderWidth: \"5px\", borderColor: \"#0b5ed7\"};\n    else if (i === hoveredBuildIndex)\n      return {marginLeft: \"1px\", borderStyle: \"solid\", borderWidth: \"5px\", borderColor: \"#6c757d\", cursor: \"pointer\"};\n    else\n      return {marginLeft: \"1px\", borderStyle: \"solid\", borderWidth: \"5px\", borderColor: \"#4d4d4d\"};\n  }\n\n  const runeDivProps = {\n    id: \"img-48\",\n    style: {display: \"inline-block\", margin: \"1px\"}\n  }\n\n  const getPcentDamageByTypeText = (instances) => {\n    let physical = 0;\n    let magic = 0;\n    let tru = 0;\n    let total = 0;\n    for (var instance of instances) {\n      total += instance.value;\n      switch (instance.type) {\n        case \"Physical\":\n          physical += instance.value;\n          break;\n        case \"Magic\":\n          magic += instance.value;\n          break;\n        case \"True\":\n          tru += instance.value;\n          break;\n      }\n    }\n    const arr = [\n      { value: physical, type: \"Physical\"},\n      { value: magic, type: \"Magic\"},\n      { value: tru, type: \"True\"}\n    ];\n    arr.sort((a, b) => b.value - a.value);\n    return (\n      <span>\n        ({arr.map((x, i) => damageText(`${Math.round(x.value/total*100)}%${i<2 ? \"/\" : \"\"}`, x.type))})\n      </span>\n    );\n  }\n\n  const allBuildsHaveDamage = () => {\n    for (var build of builds)\n      if (build.instances.length === 0)\n        return false;\n    return true;\n  }\n\n  const getDamageTotalsBySource = (instances) => {\n    const map = {};\n    let totalDamage = 0;\n    for (var instance of instances) {\n      if (!map[instance.source.name]) {\n        map[instance.source.name] = {\n          value: instance.value,\n          type: instance.type,\n          img: instance.source.imgPath,\n          occurrances: 1\n        };\n      }\n      else {\n        map[instance.source.name].value += instance.value;\n        map[instance.source.name].occurrances++;\n      }\n      totalDamage += instance.value;\n    }\n    let arr = [];\n    for (var key in map) {\n      arr = arr.concat({\n        source: key,\n        img: map[key].img,\n        type: map[key].type,\n        value: map[key].value,\n        occurrances: map[key].occurrances,\n        pcent: map[key].value / totalDamage\n      });\n    }\n    arr.sort((a, b) => b.value - a.value);\n    return arr;\n  }\n\n  const damageText = (text, type) => {\n    let style = {};\n    switch (type) {\n      case \"Physical\": \n        style = {color: \"#FF8C34\"};\n        break;\n      case \"Magic\": \n        style = {color: \"#00B0F0\"};\n        break;\n      case \"True\": \n        style = {color: \"#bbbbbb\"};\n        break;\n    }\n    return <span style={style}>{text}</span>;\n  }\n\n  return (\n    <div>\n      {detailed && \n        <div style={{textAlign: \"center\"}}>\n          <ExecuteButton/>\n          <span>Damage Breakdown: </span>\n          <Form.Check\n              inline\n              disabled={!allBuildsHaveDamage()}\n              label=\"None\"\n              name=\"breakdown\"\n              type=\"radio\"\n              id=\"none\"\n              onChange={(e)=>setBreakdown(e.target.id)}\n              style={{marginRight: 10}} />\n          <Form.Check\n              inline\n              defaultChecked\n              disabled={!allBuildsHaveDamage()}\n              label=\"Totals by Source\"\n              name=\"breakdown\"\n              type=\"radio\"\n              id=\"totals\"\n              onChange={(e)=>setBreakdown(e.target.id)}\n              style={{marginRight: 10}} />\n          <Form.Check\n              inline\n              disabled={!allBuildsHaveDamage()}\n              label=\"Full List\"\n              name=\"breakdown\"\n              type=\"radio\"\n              id=\"list\"\n              onChange={(e)=>setBreakdown(e.target.id)}\n              style={{marginRight: 10}} />\n        </div>}\n      <div style={{textAlign: \"center\"}}>\n        {builds.map((build, buildIndex) => (\n          <>\n            <div \n              style={buildDivStyle(buildIndex)}\n              onMouseEnter={()=>setHoveredBuildIndex(buildIndex)}\n              onMouseLeave={()=>setHoveredBuildIndex(-1)}\n              onClick={()=>dispatch(setEditingIndex(hoveredBuildIndex))}>\n              <div>\n                {selectedChamp.hasData && \n                  <>\n                    <img id=\"img-48\" src={`${process.env.PUBLIC_URL}/assets/img/${selectedChamp.pImgPath}`}/>\n                    <b style={{marginLeft: \"4px\", marginRight: \"20px\"}}>{build.champData <= 999 ? build.champData : 999}</b>\n                  </>\n                }\n                <b style={{marginRight: \"20px\"}}>\n                  {build.rankQ}/{build.rankW}/{build.rankE}/{build.rankR}\n                </b>\n                {findKeystone(build) \n                ? \n                  <div {...runeDivProps}>\n                    <img id=\"img-48\" src={`${process.env.PUBLIC_URL}/assets/img/${findKeystone(build).imgPath}`} style={{margin: \"1px\"}}/> \n                  </div>\n                : \n                  <div {...runeDivProps}>\n                    <div id=\"empty-item-48\"/>\n                  </div>}\n                {findSecondaryTree(build) \n                ? \n                  <div {...runeDivProps}>\n                    <img id=\"img-48\" src={`${process.env.PUBLIC_URL}/assets/img/${findSecondaryTree(build)}_icon.webp`}/> \n                  </div>\n                : \n                  <div {...runeDivProps}>\n                    <div id=\"empty-item-48\"/>\n                  </div>\n                }\n                {!detailed &&\n                  <CloseButton \n                    style={{float: \"right\", visibility: builds.length > 1 ? \"visible\" : \"hidden\"}}\n                    variant=\"white\" \n                    onClick={(e) => {\n                      dispatch(removeBuild(buildIndex));\n                      e.stopPropagation();\n                    }} />\n                }\n              </div>\n              {build.items.map(item => \n                <div style={{position: \"relative\", display: \"inline-block\", verticalAlign: \"top\"}}>\n                  <img style={{margin: \"1px\"}} id=\"img-48\" src={`${process.env.PUBLIC_URL}/assets/img/${item.imgPath}`}/>\n                  {item.hasData && <div style={{position: \"absolute\", bottom: 1, right: 0, background: \"#333\", lineHeight: 0.7, paddingBottom: \"3px\"}}><b>{item.data}</b></div>}\n                </div>\n              )}\n              {[...Array(6-build.items.length)].map(x => <div id=\"empty-item-48\"/>)}\n              {detailed && allBuildsHaveDamage() && \n                <div style={{textAlign: \"left\"}}>\n                  <p>Total Damage: {build.resultDamage} {getPcentDamageByTypeText(build.instances)}</p>\n                  <p>Time: {build.resultTime}</p>\n                  {breakdown === \"totals\" && getDamageTotalsBySource(build.instances).map((i) => (\n                  <p>\n                    <img src={`${process.env.PUBLIC_URL}/assets/img/${i.img}`} id=\"img-48\" style={{marginRight: \"4px\"}}/>\n                    {damageText(Math.trunc(i.value), i.type)}, {i.source} ({i.occurrances}) ({Math.round(i.pcent*100)}%)\n                  </p>))}\n                  {breakdown === \"list\" && build.instances.map((i) => (\n                  <p>\n                    <img src={`${process.env.PUBLIC_URL}/assets/img/${i.source.imgPath}`} id=\"img-48\" style={{marginRight: \"4px\"}}/>\n                    {damageText(Math.trunc(i.value), i.type)}, {i.source.name}\n                  </p>))}\n                </div>}\n            </div>\n            {!detailed && buildIndex < builds.length-1 && <hr/>}\n          </>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Results;\n","import { Button } from 'react-bootstrap/';\nimport Tab from 'react-bootstrap/Tab';\nimport Tabs from 'react-bootstrap/Tabs';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addBuild, resetBuildSetup } from '../store/BuildSetupSlice';\n\nimport BuildStats from './BuildStats';\nimport SkillsSetup from './SkillsSetup';\nimport ItemsSetup from './ItemsSetup';\nimport RunesSetup from './RunesSetup';\nimport Results from '../ExecuteSim/Results';\n\nconst BuildSetup = () => {\n\n  const dispatch = useDispatch();\n\n  const builds = useSelector((state) => state.buildSetup.builds);\n\n  return (\n    <div>\n      <div style={{display: \"inline-block\", width: \"20%\", verticalAlign: \"top\"}}>\n        <BuildStats/>\n      </div>\n      <div style={{display: \"inline-block\", width: \"60%\", minWidth: \"950px\", verticalAlign: \"top\"}}>\n        <Tabs>\n          <Tab \n            eventKey=\"level\" \n            title=\"Champion Level and Skill Ranks\">\n            <SkillsSetup />\n          </Tab>\n          <Tab \n            eventKey=\"items\" \n            title=\"Items\">\n            <ItemsSetup />\n          </Tab>\n          <Tab \n            eventKey=\"runes\" \n            title=\"Runes\">\n            <RunesSetup />\n          </Tab>\n        </Tabs>\n      </div>\n      <div style={{display: \"inline-block\", width: \"20%\", minWidth: \"315px\", verticalAlign: \"top\"}}>\n        <div style={{maxHeight: \"570px\", overflowY: \"auto\"}}>\n          <Results />\n        </div>\n        <div style={{textAlign: \"center\", margin: \"12px\"}}>\n          {builds.length < 16 &&\n              <Button\n                style={{marginRight: \"12px\"}}\n                onClick={()=>dispatch(addBuild())}>\n                + Add Build\n            </Button>\n          }\n          <Button\n            variant=\"secondary\"\n            onClick={()=>dispatch(resetBuildSetup())}>\n            Reset All\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default BuildSetup;\n","import { useState, useEffect } from 'react';\nimport { Table, Button } from 'react-bootstrap';\nimport Form from 'react-bootstrap/Form';\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { addSpell, removeSpell, clearCombo } from '../store/SimulationSlice';\n\nimport ClickableImg from \"../shared/ClickableImg\";\n\nconst ComboSelection = () => {\n\n  const dispatch = useDispatch();\n\n  const selectedChamp = useSelector((state) => state.simulation.champ);\n  const builds = useSelector((state) => state.buildSetup.builds);\n  const combo = useSelector((state) => state.simulation.combo);\n  const [availableSpells, setAvailableSpells] = useState([]);\n\n  useEffect(() => {\n    const load = async () => {\n      var spellsArray = [];\n      for (var build of builds) \n        spellsArray = spellsArray.concat(await loadSpells(build));\n      var filteredSpells = [];\n      for (var spell of spellsArray)\n        if (!filteredSpells.find(x => x.name === spell.name))\n          filteredSpells = filteredSpells.concat(spell);\n      setAvailableSpells(filteredSpells);\n    };\n    load();\n  }, [builds]);\n\n  const loadSpells = async (build) => {\n    var request = {\n      champion: selectedChamp.name,\n      rankQ: build.rankQ,\n      rankW: build.rankW,\n      rankE: build.rankE,\n      rankR: build.rankR,\n      items: build.items.map(x => x.name),\n      runes: build.runes.map(x => x.name)\n    };\n    var response = await fetch(`${process.env.REACT_APP_API_PATH}getSpells`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(request)\n    });\n    var data = await response.json();\n    return data;\n  }\n\n  return (\n    <div>\n      <div style={{display: \"inline-block\", width: \"40%\", verticalAlign: \"top\"}}>\n        <div>Click Icons to Set Combo</div>\n        <div style={{maxHeight: \"420px\", overflowY: \"auto\"}}>\n          {availableSpells.map((spell) => (\n            <table>\n              <tr>\n                <td>\n                  <ClickableImg \n                    style={{marginRight: \"6px\"}}\n                    src={`${process.env.PUBLIC_URL}/assets/img/${spell.imgPath}`}\n                    onClick={()=>dispatch(addSpell(spell))}/>\n                </td>\n                <td>{spell.displayName}</td>\n              </tr>\n            </table>\n          ))}\n        </div>\n      </div>\n      <div style={{display: \"inline-block\", width: \"10%\"}}/>\n      <div style={{display: \"inline-block\", width: \"50%\", verticalAlign: \"top\"}}>\n        <div>\n          Combo to Execute\n          <Button \n            style={{marginLeft: \"4px\"}}\n            variant=\"secondary\" \n            onClick={()=>dispatch(clearCombo())}>\n            Clear\n          </Button> \n        </div>\n        {combo.map((spell, i) => (\n          <div style={{display: \"inline-block\"}}>\n            <ClickableImg \n              style={{marginTop: \"4px\", width: \"48px\", height: \"48px\"}}\n              src={`${process.env.PUBLIC_URL}/assets/img/${spell.imgPath}`}\n              onClick={()=>dispatch(removeSpell(i))}/>\n            {i < combo.length-1 && <span>{\">\"}</span>}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ComboSelection;\n","const scenarioHeader = \"Scenario Types\"\r\nconst critHeader = \"Critical Strike Calculation\"\r\nconst healthHeader = \"Champion Current Health\"\r\n\r\nconst scenarioBody = (\r\n    <div>\r\n        <div>&emsp;\r\n            There are three calculations availbable to determine results and compare builds. All will model damage, cooldowns, and relavent effects in the same way, but will simulate until different conditions are met. The names are fairly self-explanatory,\r\n            but the exact mechanics of each are outlined below.\r\n        </div>\r\n        <div>&emsp;\r\n            Execution time assumes basic attacks are cancelled perfectly if the next ability is not on cooldown. Projectile travel time is not modeled; this is equivalent to standing directly next to the target.\r\n        </div>\r\n        <div>&emsp;\r\n            If the target's health is reduced below 0 before the end of the simulation, its health will be considered 0 for any current/missing health calculations, and all other damage will continue to be recorded normally. This means you can\r\n            easily leave the target's health and resistances at 0 if you are not concerned about percent-health or penetration effects, respectively.\r\n        </div>\r\n        <br/><h4>Single Combo</h4>\r\n        <div>&emsp;\r\n            This simulates using a specific and finite combo. The exact abilities will be executed in the quantity and order specified. An ability will wait to come off cooldown, if necessary, before proceeding with the rest of the combo. The \r\n            damage dealt and time to execute the whole combo is shown. The execution time can vary between builds based on attack speed and/or ability haste.\r\n        </div>\r\n        <div>&emsp;\r\n            This can be helpful to simulate a commonly used trade pattern or burst combo, or even to compare the performance of a single ability.\r\n        </div>\r\n        <br/><h4>Time to Kill</h4>\r\n        <div>&emsp;\r\n            This simulates attacking a target until it is killed. First, the exact combo specified is executed in the same manner as Single Combo. Then, all of the abilities used in the combo will be repeatedly executed as soon as their cooldown ends. The \r\n            next ability or attack to be used is whichever comes off cooldown first. Abilities not included in the original combo will not be used. This will continue until the target's health reaches 0. The total damage dealt, which is likely to be \r\n            higher than the target's health due to overkill, and the time it took to kill is shown.\r\n        </div>\r\n        <div>&emsp;\r\n            This can be used to approximate a theoretical damage-per-second value, or to simulate an 'all-in' fight against a known opponent, which might start with an initial, specific burst combo, but continue to use attacks and damaging abilities \r\n            until the target is killed.\r\n        </div>\r\n        <br/><h4>Timed</h4>\r\n        <div>&emsp;\r\n            This is similar to Time to Kill, but continues until a set time has elapsed. It still begins with the exact specified combo, then uses those abilities until the time is over. The damage dealt during this time and the exact time used is shown.\r\n            The time is likely to be slightly shorter than the simulation time due to 'leftover' time at the end in which no ability was off cooldown.\r\n        </div>\r\n        <div>&emsp;\r\n            This gives an alternate way to approximate damage-per-second, and can be a better simulation of a long fight that involves switching between multiple targets. Note, however, that still only one target is modeled.\r\n        </div>\r\n    </div>\r\n)\r\n\r\nconst critBody = (\r\n    <div>\r\n        <div>&emsp;\r\n            As randomness would not be helpful in the context of simulation and comparison, three options are given to model critical strike chance. This applies to basic attacks as well as any abilities that can critically strike. Keep in mind that\r\n            abilities that simply <i>scale</i> with critical chance will not be affected by this setting.\r\n        </div>\r\n        <br/><h4>Averaged</h4>\r\n        <div>&emsp;\r\n            All attacks do extra damage based on critical chance and critical damage, equal to the average extra damage from random crits. At 20% critical chance, each attack would benefit from 20% of bonus critical damage. This is usually the most\r\n            useful option.\r\n        </div>\r\n        {/* <br/><h4>Every N Attacks</h4>\r\n        <div>&emsp;\r\n            Only every N attacks will critically strike, where N is equal to 1 divided by critical chance. At 20% critical chance, every fifth attack will be a critical. Over a long time, this will be equivalent to the Averaged option, but is more pessimistic.\r\n        </div> */}\r\n        <br/><h4>Never Crit</h4>\r\n        <div>&emsp;\r\n            No attack will critically strike. This is helpful to gauge brief, one- or two-attack combos with low critical chance in the case that no crits occur.\r\n        </div>\r\n        <br/><h4>Always Crit</h4>\r\n        <div>&emsp;\r\n            Every attack will critically strike. Choose if you are feeling lucky.\r\n        </div>\r\n    </div>\r\n)\r\n\r\nconst healthBody = (\r\n    <div>\r\n        <div>&emsp;\r\n            This is the current health of the simulated champion, as a percent of max. This will not change during the simulation, but affects the benefit given by some champion passives, items and runes, such as Last Stand. \r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport const getHeaderText = (modal) => {\r\n    switch (modal) {\r\n        case \"scenario\":\r\n            return scenarioHeader;\r\n        case \"crit\":\r\n            return critHeader;\r\n        case \"health\":\r\n            return healthHeader;\r\n    }\r\n}\r\n\r\nexport const getBodyText = (modal) => {\r\n    switch (modal) {\r\n        case \"scenario\":\r\n            return scenarioBody;\r\n        case \"crit\":\r\n            return critBody;\r\n        case \"health\":\r\n            return healthBody;\r\n    }\r\n}","import { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Modal from 'react-bootstrap/Modal';\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport ClickableImg from '../shared/ClickableImg';\nimport { setTargetHealth, setTargetAr, setTargetMr, setSimType, setSimTime, setCritHandling, setPcentHealth } from '../store/SimulationSlice';\n\nimport { getHeaderText, getBodyText } from './HelpText';\n\nconst TargetSetup = () => {\n\n  const dispatch = useDispatch();\n\n  const simType = useSelector((state) => state.simulation.simType);\n  const simTime = useSelector((state) => state.simulation.simTime);\n  const critHandling = useSelector((state) => state.simulation.critHandling);\n  const pcentCurrentHealth = useSelector((state) => state.simulation.pcentCurrentHealth);\n  const target = useSelector((state) => state.simulation.target);\n  const [currentModal, setCurrentModal] = useState(\"\");\n\n  return (\n    <div>\n    <Form.Label><b>Simulation Settings</b></Form.Label>\n      <div className=\"d-flex align-items-end\">\n        <Form.Label id=\"settings-label\">Scenario Type:</Form.Label>\n        <Form.Control\n          id=\"settings-box\"\n          as=\"select\"\n          value={simType}\n          onChange={(e) => dispatch(setSimType(e.target.value))}\n        >\n          <option value=\"combo\">Single Combo</option>\n          <option value=\"timeToKill\">Time to Kill</option>\n          <option value=\"damageOverTime\">Timed</option>\n        </Form.Control>\n        <ClickableImg \n          style={{paddingBottom: \"8px\"}} \n          src={require(\"../question-circle.svg\").default}\n          onClick={()=>setCurrentModal(\"scenario\")}/>\n      </div>\n      {simType === \"damageOverTime\" &&\n        <div className=\"d-flex align-items-end\">\n          <Form.Label id=\"settings-label\">Simulation Time:</Form.Label>\n          <Form.Control\n            id=\"settings-box\"\n            type=\"number\"\n            value={simTime}\n            onChange={(e) => dispatch(setSimTime(e.target.value))}\n          />\n        </div>}\n      <div className=\"d-flex align-items-end\">\n        <Form.Label id=\"settings-label\">Crit Calculation:</Form.Label>\n        <Form.Control\n          id=\"settings-box\"\n          as=\"select\"\n          value={critHandling}\n          onChange={(e) => dispatch(setCritHandling(e.target.value))}\n        >\n          <option value=\"average\">Averaged</option>\n          {/* <option value=\"nth\">Every N Attacks</option> */}\n          <option value=\"none\">Never Crit</option>\n          <option value=\"always\">Always Crit</option>\n        </Form.Control>\n        <ClickableImg \n          style={{paddingBottom: \"8px\"}} \n          src={require(\"../question-circle.svg\").default}\n          onClick={()=>setCurrentModal(\"crit\")}/>\n      </div>\n      <br/>\n      <Form.Label><b>Champion Settings</b></Form.Label>\n      <div className=\"d-flex align-items-end\">\n        <Form.Label id=\"settings-label\">Current Health (%):</Form.Label>\n        <Form.Control\n          id=\"settings-box\"\n          type=\"number\"\n          value={pcentCurrentHealth}\n          onChange={(e) => dispatch(setPcentHealth(e.target.value))}\n        />\n        <ClickableImg \n          style={{paddingBottom: \"8px\"}} \n          src={require(\"../question-circle.svg\").default}\n          onClick={()=>setCurrentModal(\"health\")}/>\n      </div>\n      <br/>\n      <Form.Label><b>Target Stats</b></Form.Label>\n      <div className=\"d-flex align-items-end\">\n        <Form.Label id=\"settings-label\">Health:</Form.Label>\n        <Form.Control\n          id=\"settings-box\"\n          type=\"number\"\n          value={target.health}\n          onChange={(e) => dispatch(setTargetHealth(e.target.value))}\n        />\n      </div>\n      <div className=\"d-flex align-items-end\">\n        <Form.Label id=\"settings-label\">Armor:</Form.Label>\n        <Form.Control\n          id=\"settings-box\"\n          type=\"number\"\n          value={target.ar}\n          onChange={(e) => dispatch(setTargetAr(e.target.value))}\n        />\n      </div>\n      <div className=\"d-flex align-items-end\">\n        <Form.Label id=\"settings-label\">Magic Resist:</Form.Label>\n        <Form.Control\n          id=\"settings-box\"\n          type=\"number\"\n          value={target.mr}\n          onChange={(e) => dispatch(setTargetMr(e.target.value))}\n        />\n      </div>\n      <Modal dialogClassName=\"help-modal\" show={currentModal !== \"\"} onHide={()=>setCurrentModal(\"\")}>\n        <Modal.Header closeButton>\n          <Modal.Title>{getHeaderText(currentModal)}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{getBodyText(currentModal)}</Modal.Body>\n      </Modal>\n    </div>\n  );\n}\n\nexport default TargetSetup;\n"," import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-toggle/dist/bootstrap2-toggle.css';\nimport { Button, Form } from 'react-bootstrap';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setEditingBuilds, resetSim } from './store/SimulationSlice';\nimport { resetBuildSetup } from './store/BuildSetupSlice';\n\nimport Title from './Landing/Title';\nimport ChampSelect from './Landing/ChampSelect';\nimport BuildSetup from './BuildSetup/BuildSetup';\nimport ComboSelection from './ScenarioSetup/ComboSelection';\nimport TargetSetup from './ScenarioSetup/TargetSetup';\nimport Results from './ExecuteSim/Results';\n\nconst App = () => {\n\n  const dispatch = useDispatch();\n\n  const selectedChamp = useSelector((state) => state.simulation.champ);\n  const editingBuilds = useSelector((state) => state.simulation.editingBuilds);\n\n  const reset = () => {\n    dispatch(resetSim());\n    dispatch(resetBuildSetup());\n  }\n\n  return (\n    <div style={{maxWidth: \"1920px\", minWidth: \"1240px\", margin: \"auto\", scrollbarGutter: \"stable\"}} id=\"background\">\n      <div style={{paddingTop: \"12px\", paddingLeft: \"2%\", paddingRight: \"2%\"}}>\n        <Form onSubmit={(e)=>e.preventDefault()}>\n          {selectedChamp \n          ? \n          <div>\n            <div style={{paddingBottom: \"12px\"}}>\n              <div style={{display: \"inline-block\", width: \"20%\"}}/>\n              <div style={{display: \"inline-block\", width: \"30%\"}}>\n                <Title/>\n              </div>\n              <div style={{display: \"inline-block\", width: \"30%\", textAlign: \"center\"}}>\n                <img src={`${process.env.PUBLIC_URL}/assets/img/${selectedChamp.imgPath}`} />\n              </div>\n              <div style={{display: \"inline-block\", width: \"20%\"}}/>\n            </div>\n            {editingBuilds\n            ?\n              <div>\n                <h3 style={{textAlign: \"center\", marginBottom: \"-28px\"}}>Choose Builds to Compare</h3>\n                <div style={{display: \"inline-block\", width: \"20%\"}}/>\n                <div style={{display: \"inline-block\", width: \"60%\"}}>\n                  <Button \n                    style={{width: \"190px\"}}\n                    onClick={reset}>\n                    {\"<- Back to Champions\"}\n                  </Button>  \n                  <Button\n                    style={{width: \"190px\", float: \"right\"}}\n                    onClick={()=>dispatch(setEditingBuilds(false))}>\n                    {\"Simulate ->\"}\n                  </Button>\n                </div>\n                <div style={{display: \"inline-block\", width: \"20%\"}}/>\n                <hr/>\n                <BuildSetup \n                  champ={selectedChamp}/>\n              </div>\n            :\n              <div>\n                <h3 style={{textAlign: \"center\", marginBottom: \"-28px\"}}>Setup and Calculate</h3>\n                <div style={{display: \"inline-block\", width: \"20%\"}}/>\n                <div style={{display: \"inline-block\", width: \"60%\"}}>\n                  <Button \n                    style={{width: \"190px\"}}\n                    onClick={()=>dispatch(setEditingBuilds(true))}>\n                    {\"<- Edit Builds\"}\n                  </Button>\n                </div>\n                <div style={{display: \"inline-block\", width: \"20%\"}}/>\n                <hr/>\n                <div>\n                  <div style={{display: \"inline-block\", width: \"20%\"}}/>  \n                  <div style={{display: \"inline-block\", width: \"20%\", verticalAlign: \"top\"}}>\n                    <TargetSetup />\n                  </div>\n                  <div style={{display: \"inline-block\", width: \"40%\", verticalAlign: \"top\"}}>\n                    <ComboSelection />\n                  </div>\n                  <div style={{display: \"inline-block\", width: \"20%\"}}/>  \n                </div>\n                <Results detailed/>\n              </div>}\n          </div>\n          :\n            <div>\n              <Title/>\n              <hr/>\n              <ChampSelect/> \n            </div>\n          }\n        </Form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport buildSetupReducer from './BuildSetupSlice';\r\nimport simulationSlice from './SimulationSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n      buildSetup: buildSetupReducer,\r\n      simulation: simulationSlice\r\n  },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export default __webpack_public_path__ + \"static/media/question-circle.44981e3f.svg\";"],"sourceRoot":""}